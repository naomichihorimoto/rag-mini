<div class="container" style="padding: 2rem 1rem;">
  <div style="max-width: 800px; margin: 0 auto;">
    <h1 style="font-size: 2rem; font-weight: bold; color: #333; margin-bottom: 2rem;">🤖 AI回答</h1>

    <!-- 質問表示 -->
    <div class="card" style="margin-bottom: 2rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;">
      <h2 style="font-size: 1.25rem; font-weight: 600; margin-bottom: 1rem; color: white;">📝 あなたの質問</h2>
      <p style="font-size: 1.1rem; margin: 0; line-height: 1.6;"><%= @search_query %></p>
    </div>

    <!-- AI回答 -->
    <div class="card" style="margin-bottom: 2rem; border-left: 4px solid #10b981;">
      <h2 style="font-size: 1.25rem; font-weight: 600; margin-bottom: 1rem; color: #10b981;">🤖 AI回答</h2>

      <!-- ローディング表示 -->
      <div id="loading-indicator" style="display: flex; align-items: center; gap: 0.5rem; margin-bottom: 1rem;">
        <div style="width: 20px; height: 20px; border: 2px solid #10b981; border-top: 2px solid transparent; border-radius: 50%; animation: spin 1s linear infinite;"></div>
        <span id="loading-text" style="color: #666;">接続しています...</span>
      </div>

      <!-- ストリーミング回答表示エリア -->
      <div id="ai-answer" style="font-size: 1rem; line-height: 1.7; color: #333; min-height: 50px; border: 1px solid #e5e5e5; padding: 1rem; border-radius: 0.5rem; background: #fafafa;">
      </div>

      <!-- エラー表示エリア -->
      <div id="error-message" style="display: none; color: #dc2626; background: #fef2f2; padding: 1rem; border-radius: 0.5rem; margin-top: 1rem;">
      </div>
    </div>

    <!-- 参考文書 -->
    <div id="reference-documents" class="card" style="margin-bottom: 2rem; display: none;">
      <h3 style="font-size: 1.125rem; font-weight: 600; margin-bottom: 1rem; color: #333;">📚 参考にした文書</h3>
      <div id="documents-list"></div>
    </div>

    <!-- 操作ボタン -->
    <div style="display: flex; gap: 1rem; margin-top: 2rem;">
      <%= link_to "← 戻る", documents_path, class: "btn btn-secondary" %>
      <%= form_with url: answer_documents_path, method: :get, style: "display: inline-block;" do |f| %>
        <%= f.hidden_field :q, value: @search_query %>
        <%= f.submit "🔄 再生成", class: "btn btn-primary" %>
      <% end %>
      <%= link_to "📄 検索結果を見る", search_documents_path(q: @search_query), class: "btn btn-secondary" %>
    </div>

    <!-- 新しい質問フォーム -->
    <div class="card" style="margin-top: 2rem; background: #f8fafc;">
      <h3 style="font-size: 1.125rem; font-weight: 600; margin-bottom: 1rem; color: #333;">💭 新しい質問をする</h3>
      <%= form_with url: answer_documents_path, method: :get, style: "display: flex; gap: 1rem;" do |f| %>
        <%= f.text_field :q, placeholder: "他に質問はありますか？", class: "form-control", style: "flex: 1;" %>
        <%= f.submit "🤖 AI回答", class: "btn btn-primary" %>
      <% end %>
    </div>
  </div>
</div>

<style>
@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const query = '<%= j(@search_query) %>';
  if (query) {
    startStreamingAnswer(query);
  }
});

function startStreamingAnswer(query) {
  const loadingIndicator = document.getElementById('loading-indicator');
  const loadingText = document.getElementById('loading-text');
  const aiAnswerDiv = document.getElementById('ai-answer');
  const errorDiv = document.getElementById('error-message');
  const referenceDocsDiv = document.getElementById('reference-documents');

  // 段階的なローディングメッセージ
  function updateLoadingMessage(message) {
    loadingText.textContent = message;
  }

  // 初期状態
  loadingIndicator.style.display = 'flex';
  aiAnswerDiv.innerHTML = '';
  errorDiv.style.display = 'none';
  referenceDocsDiv.style.display = 'none';
  updateLoadingMessage('接続しています...');

  let answerText = '';
  let messageCount = 0;

  const eventSource = new EventSource('/documents/stream_answer?q=' + encodeURIComponent(query));

  // 接続が確立されたら
  eventSource.onopen = function(event) {
    updateLoadingMessage('関連文書を検索しています...');
    console.log('SSE connection opened');
  };

  eventSource.onmessage = function(event) {
    messageCount++;
    const timestamp = new Date().toLocaleTimeString();

    // リアルタイム受信をコンソールで確認
    console.log(`[${timestamp}] Message ${messageCount}: ${event.data.substring(0, 100)}...`);

    try {
      const data = JSON.parse(event.data);

      // 即座にDOM更新（遅延なし）
      switch (data.type) {
        case 'documents':
          updateLoadingMessage('AIが回答を準備しています...');
          displayReferenceDocuments(data.data);
          referenceDocsDiv.style.display = 'block';
          console.log(`[${timestamp}] Documents displayed`);
          break;

        case 'answer_start':
          updateLoadingMessage('AIが回答を生成中...');
          console.log(`[${timestamp}] Answer started`);
          // ここではローディングを非表示にしない（実際のチャンクが来るまで待つ）
          break;

        case 'data':
          // 最初のコンテンツが来たら即座にローディングを隠す
          if (answerText.length === 0 && data.content) {
            loadingIndicator.style.display = 'none';
          }

          if (data.content) {
            answerText += data.content;
            aiAnswerDiv.innerHTML = answerText.replace(/\n/g, '<br>');
            console.log(`[${timestamp}] Content added: "${data.content}" (total: ${answerText.length} chars)`);
          }

          if (data.final) {
            eventSource.close();
            console.log(`[${timestamp}] Streaming completed`);
          }
          break;

        case 'answer_complete':
          eventSource.close();
          console.log(`[${timestamp}] Answer complete`);
          break;

        case 'error':
          showError(data.message);
          eventSource.close();
          console.log(`[${timestamp}] Error: ${data.message}`);
          break;
      }
    } catch (e) {
      console.error(`[${timestamp}] Parse error:`, e);
    }
  };

  eventSource.onerror = function(event) {
    console.error('EventSource error:', event);
    updateLoadingMessage('接続エラーが発生しました...');
    setTimeout(() => {
      showError('接続エラーが発生しました。しばらく後にもう一度お試しください。');
      eventSource.close();
    }, 1000);
  };
}

function displayReferenceDocuments(documents) {
  const documentsListDiv = document.getElementById('documents-list');
  documentsListDiv.innerHTML = documents.map((doc, index) => `
    <div style="border: 1px solid #e5e5e5; border-radius: 0.5rem; padding: 1rem; margin-bottom: 1rem; background: #f9f9f9;">
      <h4 style="font-size: 1rem; font-weight: 600; margin: 0 0 0.75rem 0;">
        <a href="/documents/${doc.id}" style="color: #3b82f6; text-decoration: none;">
          📄 ${escapeHtml(doc.title)}
        </a>
      </h4>
      <p style="color: #666; margin: 0; font-size: 0.9rem; line-height: 1.5;">
        ${escapeHtml(doc.content)}
      </p>
    </div>
  `).join('');
}

function showError(message) {
  const loadingIndicator = document.getElementById('loading-indicator');
  const errorDiv = document.getElementById('error-message');

  loadingIndicator.style.display = 'none';
  errorDiv.textContent = message;
  errorDiv.style.display = 'block';
}

function escapeHtml(text) {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}
</script>
